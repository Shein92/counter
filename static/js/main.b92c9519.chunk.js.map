{"version":3,"sources":["Components/Counter/Counter.module.css","Common/Button/Button.tsx","Components/Counter/CounterOutPut.tsx","Components/Counter/Counter.tsx","Components/SetCounter/SetCounterOutput.tsx","Components/SetCounter/SetCounter.tsx","state/counter-reducer.ts","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["module","exports","Button","props","style","onClick","disabled","title","CounterOutput","React","memo","className","outputWrapper","output","error","incorrectValue","changeMode","enterMessage","redNumber","number","regularNumber","Counter","mainStyle","width","height","backgroundColor","marginTop","outline","borderRadius","cursor","border","fontSize","inactiveBtn","styles","wrapper","maxNumber","btnWrapper","incrementNumber","resetNumber","minNumber","SetCounterOutput","type","value","maxNum","onChange","event","maxNumberChange","currentTarget","setNewChangeMode","textAlign","inputTop","minNum","minNumberChange","SetCounter","num","setNewMinNumber","setErrorChange","setNewMaxNumber","saveState","savedMinNum","localStorage","getItem","savedMaxNum","initialState","JSON","parse","key","state","stateAsString","stringify","setItem","App","counter","useSelector","dispatch","useDispatch","bool","action","setChangeModeAC","setErrorAC","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,SAAW,0BAA0B,UAAY,2BAA2B,cAAgB,+BAA+B,WAAa,4BAA4B,aAAe,8BAA8B,eAAiB,gCAAgC,aAAe,8BAA8B,YAAc,+B,qKCcnbC,MANf,SAAgBC,GACZ,OACI,4BAAQC,MAAOD,EAAMC,MAAOC,QAASF,EAAME,QAASC,SAAUH,EAAMG,UAAWH,EAAMI,Q,gBCY7F,IAEeC,EAFOC,IAAMC,MAb5B,SAAwBP,GACvB,OACC,yBAAKQ,UAAWP,IAAMQ,eACrB,yBAAKD,UAAWP,IAAMS,QACpBV,EAAMW,MAAQ,0BAAMH,UAAWP,IAAMW,gBAAvB,oBACdZ,EAAMa,WAAa,0BAAML,UAAWP,IAAMa,cAAvB,qCAClBd,EAAMe,UAAY,0BAAMP,UAAWP,IAAMc,WAAYf,EAAMgB,QAC1D,0BAAMR,UAAWP,IAAMgB,eAAgBjB,EAAMgB,aCiDpD,IAEeE,EAFCZ,IAAMC,MAnDtB,SAAkBP,GAEjB,IAAImB,EAAY,CACfC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,oBACjBC,UAAW,OACXC,QAAS,OACTC,aAAc,MACdC,OAAQ,UACRC,OAAQ,OACRC,SAAU,QAEPC,EAAc,CACjBT,MAAO,OACPC,OAAQ,OACRC,gBAAiB,OACjBC,UAAW,OACXC,QAAS,OACTC,aAAc,MACdE,OAAQ,OACRC,SAAU,QAEX,OACO,yBAAKpB,UAAWsB,IAAOC,SAC5B,kBAAC,EAAD,CAAef,OAAQhB,EAAMgB,OAC5BD,UAAWf,EAAMgB,SAAWhB,EAAMgC,UAClCnB,WAAYb,EAAMa,WAClBF,MAAOX,EAAMW,QAEd,yBAAKH,UAAWsB,IAAOG,YACtB,kBAAC,EAAD,CAAQ7B,MAAM,MACbF,QAASF,EAAMkC,gBACf/B,SAAUH,EAAMgB,SAAWhB,EAAMgC,WAChChC,EAAMa,YAAcb,EAAMW,MAC3BV,MAAOD,EAAMgB,SAAWhB,EAAMgC,WAC7BhC,EAAMa,YACNb,EAAMW,MAAQkB,EAAcV,IAE9B,kBAAC,EAAD,CAAQf,MAAM,QACbF,QAASF,EAAMmC,YACfhC,SAAUH,EAAMgB,SAAWhB,EAAMoC,WAChCpC,EAAMa,YAAab,EAAMW,MAC1BV,MAAOD,EAAMgB,SAAWhB,EAAMoC,WAC7BpC,EAAMa,YACNb,EAAMW,MAAQkB,EAAcV,SCblC,IAEekB,EAFU/B,IAAMC,MAnC/B,SAA2BP,GAY1B,OACC,yBAAKQ,UAAWP,IAAMQ,eACrB,yBAAKD,UAAWP,IAAMS,QACrB,2CACY,2BAAO4B,KAAK,SAASC,MAAOvC,EAAMwC,OAC5CC,SAVe,SAACC,GACpB1C,EAAM2C,iBAAiBD,EAAME,cAAcL,OAC3CvC,EAAM6C,kBAAiB,IASnB5C,MAAOD,EAAMW,MAAQ,CAAES,MAAO,OAAQ0B,UAAW,SAAUlB,SAAU,OAAQN,gBAAiB,OAAU,CAAEF,MAAO,OAAQ0B,UAAW,SAAUlB,SAAU,WAG1J,yBAAKpB,UAAWP,IAAM8C,UAAtB,cACY,2BAAOT,KAAK,SAASC,MAAOvC,EAAMgD,OAC5CP,SArBe,SAACC,GACpB1C,EAAMiD,iBAAiBP,EAAME,cAAcL,OAC3CvC,EAAM6C,kBAAiB,IAoBnB5C,MAAOD,EAAMW,MAAQ,CAAES,MAAO,OAAQ0B,UAAW,SAAUlB,SAAU,OAAQN,gBAAiB,OAAW,CAAEF,MAAO,OAAQ0B,UAAW,SAAUlB,SAAU,gBCyC/J,IAEesB,EAFI5C,IAAMC,MA5DzB,SAAqBP,GAuCpB,OACC,yBAAKQ,UAAWsB,IAAOC,SACtB,kBAAC,EAAD,CACCiB,OAAQhD,EAAMoC,UACdI,OAAQxC,EAAMgC,UACdiB,gBApBH,SAAyBE,GACxBnD,EAAMoD,gBAAgBD,GACtBnD,EAAMqD,eAAerD,EAAMgC,WAAamB,GAAOA,EAAM,IAmBnDR,gBAjBH,SAAyBQ,GACxBnD,EAAMsD,gBAAgBH,GACtBnD,EAAMqD,eAAeF,GAAOnD,EAAMoC,WAAae,EAAM,IAgBnDN,iBAAkB7C,EAAM6C,iBACxBlC,MAAOX,EAAMW,QAEd,yBAAKH,UAAWsB,IAAOG,YACtB,kBAAC,EAAD,CAAQ7B,MAAM,MACbD,SAAUH,EAAMoC,WAAapC,EAAMgC,YAAchC,EAAMa,WACvDX,QAnBJ,WACCF,EAAM6C,kBAAiB,GACvBU,EAAU,MAAOvD,EAAMoC,WACvBmB,EAAU,MAAOvD,EAAMgC,YAiBpB/B,MAAOD,EAAMoC,WAAapC,EAAMgC,YAAchC,EAAMa,WAxCtC,CACjBO,MAAO,OACPC,OAAQ,OACRC,gBAAiB,OACjBC,UAAW,OACXC,QAAS,OACTC,aAAc,MACdE,OAAQ,OACRC,SAAU,QAnBK,CACfR,MAAO,OACPC,OAAQ,OACRC,gBAAiB,oBACjBC,UAAW,OACXC,QAAS,OACTC,aAAc,MACdC,OAAQ,UACRC,OAAQ,OACRC,SAAU,e,cCpBN4B,EAAcC,aAAaC,QAAQ,OACnCC,EAAcF,aAAaC,QAAQ,OAErCE,EAAiC,CACjC5C,OAAwB,OAAhBwC,EAAuBK,KAAKC,MAAMN,GAAe,EACzDpB,UAA2B,OAAhBoB,EAAuBK,KAAKC,MAAMN,GAAe,EAC5DxB,UAA2B,OAAhB2B,EAAuBE,KAAKC,MAAMH,GAAe,EAC5D9C,YAAY,EACZF,OAAO,GCRJ,SAAS4C,EAAaQ,EAAaC,GACzC,IAAMC,EAAgBJ,KAAKK,UAAUF,GACrCP,aAAaU,QAAQJ,EAAKE,GAmEZG,MA1Df,WACC,IAAMC,EAAUC,aAAgD,SAAAN,GAAK,OAAIA,EAAMK,WACzEE,EAAWC,cAgCjB,OACC,yBAAKhE,UAAU,OACd,kBAAC,EAAD,CACC4B,UAAWiC,EAAQjC,UACnBJ,UAAWqC,EAAQrC,UACnBa,iBAfH,SAA0B4B,GACzB,IAAIC,EDwCyB,SAACD,GAC5B,MAAO,CAACnC,KAAM,kBAAmBmC,QCzCtBE,CAAgBF,GAC7BF,EAASG,IAcP/D,MAAO0D,EAAQ1D,MACfE,WAAYwD,EAAQxD,WACpBwC,eAbH,SAAwBoB,GACvB,IAAIC,EDsCoB,SAACD,GACvB,MAAO,CAACnC,KAAM,YAAamC,QCvChBG,CAAWH,GACxBF,EAASG,IAYPtB,gBA7BH,SAAyBD,GAExBoB,EDsCS,CAACjC,KAAM,qBAAsBU,OCvCPG,KA6B7BG,gBAzBH,SAAyBH,GAExBoB,EDoCS,CAACjC,KAAM,qBAAsBE,OCrCPW,OA0B9B,kBAAC,EAAD,CAASnC,OAAQqD,EAAQrD,OACxBoB,UAAWiC,EAAQjC,UACnBJ,UAAWqC,EAAQrC,UACnBE,gBA7CH,WAECqC,EDsDS,CAACjC,KAAM,sBCVdH,YAzCH,WAECoC,EDoDS,CAACjC,KAAM,kBCZdzB,WAAYwD,EAAQxD,WACpBF,MAAO0D,EAAQ1D,UC3DCkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAcC,YAAgB,CAChCd,QHwC0B,WAAkE,IAAjEL,EAAgE,uDAAtCJ,EAAcc,EAAwB,uCAC3F,OAAOA,EAAOpC,MACV,IAAK,qBACD,OAAO,eAAI0B,EAAX,CAAkBhD,OAAQ0D,EAAO1B,OAAQZ,UAAWsC,EAAO1B,SAE/D,IAAK,qBACD,OAAO,eAAIgB,EAAX,CAAkBhC,UAAW0C,EAAOlC,SAExC,IAAK,mBACD,OAAO,eAAIwB,EAAX,CAAkBhD,OAASgD,EAAMhD,OAAS,IAE9C,IAAK,eACD,OAAO,eAAIgD,EAAX,CAAkBhD,OAAQgD,EAAM5B,YAEpC,IAAK,kBACD,OAAO,eAAI4B,EAAX,CAAkBnD,WAAY6D,EAAOD,OAEzC,IAAK,YACD,OAAO,eAAIT,EAAX,CAAkBrD,MAAO+D,EAAOD,OAIpC,QACI,OAAOT,MG5DNoB,EAAQC,YAAYH,GAKjCJ,OAAOM,MAAQA,ECJfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEFI,SAASC,eAAe,SF+HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArF,GACLsF,QAAQtF,MAAMA,EAAMuF,c","file":"static/js/main.b92c9519.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__1u3kT\",\"outputWrapper\":\"Counter_outputWrapper__3iPYv\",\"output\":\"Counter_output__1g_JK\",\"inputTop\":\"Counter_inputTop__O-UGZ\",\"redNumber\":\"Counter_redNumber__1ziSE\",\"regularNumber\":\"Counter_regularNumber__2xXrq\",\"btnWrapper\":\"Counter_btnWrapper__g1aCI\",\"enterMessage\":\"Counter_enterMessage__cjpXw\",\"incorrectValue\":\"Counter_incorrectValue__3fJ4A\",\"mainStyleBtn\":\"Counter_mainStyleBtn__30wrf\",\"btnInactive\":\"Counter_btnInactive__36lAL\"};","import React, { CSSProperties } from 'react'\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClick: () => void\r\n    disabled: boolean\r\n    style: CSSProperties\r\n}\r\n\r\nfunction Button(props: ButtonPropsType) {\r\n    return ( \r\n        <button style={props.style} onClick={props.onClick} disabled={props.disabled}>{props.title}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport style from './Counter.module.css'\r\n\r\ntype CounterOutputPropsType = {\r\n\tnumber: number,\r\n\tredNumber: boolean,\r\n\tchangeMode: boolean,\r\n\terror: boolean\r\n}\r\n\r\nfunction CounterOutput1(props: CounterOutputPropsType) {\r\n\treturn (\r\n\t\t<div className={style.outputWrapper}>\r\n\t\t\t<div className={style.output}>\r\n\t\t\t\t{props.error ? <span className={style.incorrectValue}>Incorrect value!</span> :\r\n\t\t\t\t\tprops.changeMode ? <span className={style.enterMessage}>Enter some values and press 'set'</span> :\r\n\t\t\t\t\t\tprops.redNumber ? <span className={style.redNumber}>{props.number}</span> :\r\n\t\t\t\t\t\t\t<span className={style.regularNumber}>{props.number}</span>}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst CounterOutput = React.memo(CounterOutput1)\r\n\r\nexport default CounterOutput;\r\n\r\n","import React from 'react'\r\nimport Button from '../../Common/Button/Button';\r\nimport CounterOutput from './CounterOutPut';\r\nimport styles from './Counter.module.css';\r\n\r\ntype CounterPropsType = {\r\n\tnumber: number,\r\n\tminNumber: number,\r\n\tmaxNumber: number,\r\n\tincrementNumber: () => void,\r\n\tresetNumber: () => void,\r\n\tchangeMode: boolean,\r\n\terror: boolean\r\n}\r\n\r\nfunction Counter1(props: CounterPropsType) {\r\n\r\n\tlet mainStyle = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'rgb(67, 185, 218)',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tcursor: 'pointer',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px'\r\n\t};\r\n\tlet inactiveBtn = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'grey',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px'\r\n\t}\r\n\treturn (\r\n        <div className={styles.wrapper}>\r\n\t\t\t<CounterOutput number={props.number} \r\n\t\t\t\tredNumber={props.number === props.maxNumber} \r\n\t\t\t\tchangeMode={props.changeMode}\r\n\t\t\t\terror={props.error}\r\n\t\t\t/>\r\n\t\t\t<div className={styles.btnWrapper}>\r\n\t\t\t\t<Button title=\"inc\"\r\n\t\t\t\t\tonClick={props.incrementNumber}\r\n\t\t\t\t\tdisabled={props.number === props.maxNumber || \r\n\t\t\t\t\t\tprops.changeMode || props.error}\r\n\t\t\t\t\tstyle={props.number === props.maxNumber || \r\n\t\t\t\t\t\tprops.changeMode || \r\n\t\t\t\t\t\tprops.error ? inactiveBtn : mainStyle }\r\n\t\t\t\t/>\r\n\t\t\t\t<Button title=\"reset\"\r\n\t\t\t\t\tonClick={props.resetNumber}\r\n\t\t\t\t\tdisabled={props.number === props.minNumber || \r\n\t\t\t\t\t\tprops.changeMode ||props.error}\r\n\t\t\t\t\tstyle={props.number === props.minNumber || \r\n\t\t\t\t\t\tprops.changeMode || \r\n\t\t\t\t\t\tprops.error ? inactiveBtn : mainStyle }\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    )\r\n}\r\nconst Counter = React.memo(Counter1);\r\n\r\nexport default Counter;","import React, { ChangeEvent } from 'react';\r\nimport style from '../Counter/Counter.module.css'\r\n\r\ntype SetCounterOutputPropsType = {\r\n\tminNum: number,\r\n\tmaxNum: number,\r\n\tminNumberChange: (num: number) => void,\r\n\tmaxNumberChange: (num: number) => void,\r\n\tsetNewChangeMode: (bool: boolean) => void,\r\n\terror: boolean\r\n}\r\n\r\nfunction SetCounterOutput1(props: SetCounterOutputPropsType) {\r\n\r\n\tconst onMinChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tprops.minNumberChange(+event.currentTarget.value);\r\n\t\tprops.setNewChangeMode(true);\r\n\t}\r\n\r\n\tconst onMaxChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tprops.maxNumberChange(+event.currentTarget.value);\r\n\t\tprops.setNewChangeMode(true);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.outputWrapper}>\r\n\t\t\t<div className={style.output}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\tMax Value: <input type=\"number\" value={props.maxNum}\r\n\t\t\t\t\t\tonChange={onMaxChange}\r\n\t\t\t\t\t\tstyle={props.error ? { width: '50px', textAlign: \"center\", fontSize: \"16px\", backgroundColor: 'red' } : { width: '50px', textAlign: \"center\", fontSize: \"16px\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={style.inputTop}>\r\n\t\t\t\t\tMin Value: <input type=\"number\" value={props.minNum}\r\n\t\t\t\t\t\tonChange={onMinChange}\r\n\t\t\t\t\t\tstyle={props.error ? { width: '50px', textAlign: \"center\", fontSize: \"16px\", backgroundColor: 'red'  } : { width: '50px', textAlign: \"center\", fontSize: \"16px\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <MinValue value={props.minNum} \r\n\t\t\t\t\tonChange={onMinChange} \r\n\t\t\t\t\tstyle={props.error ? { width: '50px', textAlign: \"center\", fontSize: \"16px\", backgroundColor: 'red'  } : { width: '50px', textAlign: \"center\", fontSize: \"16px\"}}/> */}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst SetCounterOutput = React.memo(SetCounterOutput1);\r\n\r\nexport default SetCounterOutput;","import React from 'react';\r\nimport SetCounterOutput from './SetCounterOutput';\r\nimport Button from '../../Common/Button/Button';\r\nimport styles from '../Counter/Counter.module.css'\r\nimport { saveState } from '../../App';\r\n\r\ntype SetCounterPropsType = {\r\n\tsetNewChangeMode: (bool: boolean) => void,\r\n\terror: boolean,\r\n\tsetErrorChange: (bool: boolean) => void,\r\n\tchangeMode: boolean\r\n\tminNumber: number,\r\n\tmaxNumber: number,\r\n\tsetNewMaxNumber: (num: number) => void\r\n\tsetNewMinNumber: (num: number) => void\r\n}\r\n\r\nfunction SetCounter1(props: SetCounterPropsType) {\r\n\r\n\tlet mainStyle = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'rgb(67, 185, 218)',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tcursor: 'pointer',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px',\r\n\t};\r\n\tlet inactiveBtn = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'grey',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px'\r\n\t}\r\n\r\n\tfunction minNumberChange(num: number) {\r\n\t\tprops.setNewMinNumber(num);\r\n\t\tprops.setErrorChange(props.maxNumber <= num || num < 0);\r\n\t}\r\n\tfunction maxNumberChange(num: number) {\r\n\t\tprops.setNewMaxNumber(num);\r\n\t\tprops.setErrorChange(num <= props.minNumber || num < 0);\r\n\t}\r\n\r\n\tfunction onClickChangeMinMaxValues() {\r\n\t\tprops.setNewChangeMode(false);\r\n\t\tsaveState('min', props.minNumber);\r\n\t\tsaveState('max', props.maxNumber);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={styles.wrapper}>\r\n\t\t\t<SetCounterOutput\r\n\t\t\t\tminNum={props.minNumber}\r\n\t\t\t\tmaxNum={props.maxNumber}\r\n\t\t\t\tminNumberChange={minNumberChange}\r\n\t\t\t\tmaxNumberChange={maxNumberChange}\r\n\t\t\t\tsetNewChangeMode={props.setNewChangeMode}\r\n\t\t\t\terror={props.error}\r\n\t\t\t/>\r\n\t\t\t<div className={styles.btnWrapper}>\r\n\t\t\t\t<Button title=\"set\"\r\n\t\t\t\t\tdisabled={props.minNumber >= props.maxNumber || !props.changeMode ? true : false}\r\n\t\t\t\t\tonClick={onClickChangeMinMaxValues}\r\n\t\t\t\t\tstyle={props.minNumber >= props.maxNumber || !props.changeMode ? inactiveBtn : mainStyle}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst SetCounter = React.memo(SetCounter1)\r\n\r\nexport default SetCounter;","export type InitialStateType = {\r\n    number: number,\r\n    minNumber: number,\r\n    maxNumber: number,\r\n    changeMode: boolean,\r\n    error: boolean\r\n}\r\n\r\nconst savedMinNum = localStorage.getItem('min');\r\nconst savedMaxNum = localStorage.getItem('max');\r\n\r\nlet initialState: InitialStateType = {\r\n    number: savedMinNum !== null ? JSON.parse(savedMinNum) : 0,\r\n    minNumber: savedMinNum !== null ? JSON.parse(savedMinNum) : 0,\r\n    maxNumber: savedMaxNum !== null ? JSON.parse(savedMaxNum) : 5,\r\n    changeMode: false,\r\n    error: false\r\n}\r\n\r\ntype SetNewMinNumberActionType = {\r\n    type: 'SET-NEW-MIN-NUMBER',\r\n    minNum: number\r\n}\r\ntype SetNewMaxNumberActionType = {\r\n    type: 'SET-NEW-MAX-NUMBER',\r\n    maxNum: number\r\n}\r\ntype IncrementNumberActionType = {\r\n    type: 'INCREMENT-NUMBER'\r\n}\r\ntype ResetNumberActionType = {\r\n    type: 'RESET-NUMBER'\r\n}\r\ntype SetChangeModeActionType = {\r\n    type: 'SET-CHANGE-MODE',\r\n    bool: boolean\r\n}\r\ntype SetErrorActionType = {\r\n    type: 'SET-ERROR',\r\n    bool: boolean\r\n}\r\n\r\ntype ActionsType = SetNewMinNumberActionType | SetNewMaxNumberActionType | IncrementNumberActionType | ResetNumberActionType | SetChangeModeActionType | SetErrorActionType\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch(action.type) {\r\n        case 'SET-NEW-MIN-NUMBER': {\r\n            return {...state, number: action.minNum, minNumber: action.minNum}\r\n        }\r\n        case 'SET-NEW-MAX-NUMBER': {\r\n            return {...state, maxNumber: action.maxNum}\r\n        }\r\n        case 'INCREMENT-NUMBER': {\r\n            return {...state, number: (state.number + 1)}\r\n        }\r\n        case 'RESET-NUMBER': {\r\n            return {...state, number: state.minNumber}\r\n        }\r\n        case 'SET-CHANGE-MODE': {\r\n            return {...state, changeMode: action.bool}\r\n        }\r\n        case 'SET-ERROR': {  \r\n            return {...state, error: action.bool}\r\n        }\r\n\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setNewMinNumberAC = (minNum: number): ActionsType => {\r\n    return {type: 'SET-NEW-MIN-NUMBER', minNum}\r\n}\r\nexport const setNewMaxNumberAC = (maxNum: number): ActionsType => {\r\n    return {type: 'SET-NEW-MAX-NUMBER', maxNum}\r\n}\r\nexport const incrementNumberAC = (): ActionsType => {\r\n    return {type: 'INCREMENT-NUMBER'}\r\n}\r\nexport const resetNumberAC = (): ActionsType => {\r\n    return {type: 'RESET-NUMBER'}\r\n}\r\nexport const setChangeModeAC = (bool: boolean): ActionsType => {\r\n    return {type: 'SET-CHANGE-MODE', bool}\r\n}\r\nexport const setErrorAC = (bool: boolean): ActionsType => {\r\n    return {type: 'SET-ERROR', bool}\r\n}","import React from 'react';\nimport './App.css';\nimport Counter from './Components/Counter/Counter';\nimport SetCounter from './Components/SetCounter/SetCounter';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppRootStateType } from './state/store';\nimport { InitialStateType, resetNumberAC, setNewMinNumberAC, setNewMaxNumberAC, setChangeModeAC, setErrorAC, incrementNumberAC } from './state/counter-reducer';\n\nexport function saveState<T>(key: string, state: T) {\n\tconst stateAsString = JSON.stringify(state);\n\tlocalStorage.setItem(key, stateAsString)\n}\n\nexport function restoreState<T>(key: string, defaultState: T) {\n\tconst stateAsString = localStorage.getItem(key);\n\tif (stateAsString !== null) defaultState = JSON.parse(stateAsString);\n\treturn defaultState;\n}\n\nfunction App() {\n\tconst counter = useSelector<AppRootStateType, InitialStateType>(state => state.counter);\n\tconst dispatch = useDispatch();\n\n\tfunction incrementNumber() {\n\t\tlet action = incrementNumberAC();\n\t\tdispatch(action);\n\t}\n\n\tfunction resetNumber() {\n\t\tlet action = resetNumberAC();\n\t\tdispatch(action);\n\t}\n\n\tfunction setNewMinNumber(num: number) {\n\t\tlet action = setNewMinNumberAC(num);\n\t\tdispatch(action);\n\t}\n\n\tfunction setNewMaxNumber(num: number) {\n\t\tlet action = setNewMaxNumberAC(num);\n\t\tdispatch(action);\n\t}\n\n\tfunction setNewChangeMode(bool: boolean) {\n\t\tlet action = setChangeModeAC(bool);\n\t\tdispatch(action);\n\t}\n\n\tfunction setErrorChange(bool: boolean) {\n\t\tlet action = setErrorAC(bool);\n\t\tdispatch(action);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SetCounter\n\t\t\t\tminNumber={counter.minNumber}\n\t\t\t\tmaxNumber={counter.maxNumber}\n\t\t\t\tsetNewChangeMode={setNewChangeMode}\n\t\t\t\terror={counter.error}\n\t\t\t\tchangeMode={counter.changeMode}\n\t\t\t\tsetErrorChange={setErrorChange}\n\t\t\t\tsetNewMinNumber={setNewMinNumber}\n\t\t\t\tsetNewMaxNumber={setNewMaxNumber}\n\t\t\t/>\n\t\t\t<Counter number={counter.number}\n\t\t\t\tminNumber={counter.minNumber}\n\t\t\t\tmaxNumber={counter.maxNumber}\n\t\t\t\tincrementNumber={incrementNumber}\n\t\t\t\tresetNumber={resetNumber}\n\t\t\t\tchangeMode={counter.changeMode}\n\t\t\t\terror={counter.error}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux';\r\nimport { counterReducer } from './counter-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n}) \r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}