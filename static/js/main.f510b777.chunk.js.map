{"version":3,"sources":["Components/Counter/Counter.module.css","Common/Button/Button.tsx","Components/Counter/CounterOutPut.tsx","Components/Counter/Counter.tsx","Components/SetCounter/SetCounterOutput.tsx","Components/SetCounter/SetCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","style","onClick","disabled","title","CounterOutput","className","outputWrapper","output","error","incorrectValue","changeMode","enterMessage","redNumber","number","regularNumber","Counter","mainStyle","width","height","backgroundColor","marginTop","outline","borderRadius","cursor","border","fontSize","inactiveBtn","styles","wrapper","maxNumber","btnWrapper","incrementNumber","resetNumber","minNumber","SetCounterOutput","type","value","maxNum","onChange","event","maxNumberChange","currentTarget","setNewChangeMode","textAlign","inputTop","minNum","minNumberChange","SetCounter","num","setNewMinNumber","setNewMaxNumber","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","App","useState","setNumber","savedMinNum","getItem","parse","setMinNumber","savedMaxNum","setMaxNumber","setChangeMode","setError","console","log","bool","setErrorChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f510b777.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__1u3kT\",\"outputWrapper\":\"Counter_outputWrapper__3iPYv\",\"output\":\"Counter_output__1g_JK\",\"inputTop\":\"Counter_inputTop__O-UGZ\",\"redNumber\":\"Counter_redNumber__1ziSE\",\"regularNumber\":\"Counter_regularNumber__2xXrq\",\"btnWrapper\":\"Counter_btnWrapper__g1aCI\",\"enterMessage\":\"Counter_enterMessage__cjpXw\",\"incorrectValue\":\"Counter_incorrectValue__3fJ4A\",\"mainStyleBtn\":\"Counter_mainStyleBtn__30wrf\",\"btnInactive\":\"Counter_btnInactive__36lAL\"};","import React, { CSSProperties } from 'react'\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClick: () => void\r\n    disabled: boolean\r\n    style: CSSProperties\r\n}\r\n\r\nfunction Button(props: ButtonPropsType) {\r\n    return ( \r\n        <button style={props.style} onClick={props.onClick} disabled={props.disabled}>{props.title}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport style from './Counter.module.css'\r\n\r\ntype CounterOutputPropsType = {\r\n\tnumber: number,\r\n\tredNumber: boolean,\r\n\tchangeMode: boolean,\r\n\terror: boolean\r\n}\r\n\r\nfunction CounterOutput(props: CounterOutputPropsType) {\r\n\treturn (\r\n\t\t<div className={style.outputWrapper}>\r\n\t\t\t<div className={style.output}>\r\n\t\t\t\t{props.error ? <span className={style.incorrectValue}>Incorrect value!</span> :\r\n\t\t\t\t\tprops.changeMode ? <span className={style.enterMessage}>Enter some values and press 'set'</span> :\r\n\t\t\t\t\t\tprops.redNumber ? <span className={style.redNumber}>{props.number}</span> :\r\n\t\t\t\t\t\t\t<span className={style.regularNumber}>{props.number}</span>}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CounterOutput;\r\n\r\n","import React from 'react'\r\nimport Button from '../../Common/Button/Button';\r\nimport CounterOutput from './CounterOutPut';\r\nimport styles from './Counter.module.css';\r\n\r\ntype CounterPropsType = {\r\n\tnumber: number,\r\n\tminNumber: number,\r\n\tmaxNumber: number,\r\n\tincrementNumber: () => void,\r\n\tresetNumber: () => void,\r\n\tchangeMode: boolean,\r\n\terror: boolean\r\n}\r\n\r\nfunction Counter(props: CounterPropsType) {\r\n\r\n\tlet mainStyle = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'rgb(67, 185, 218)',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tcursor: 'pointer',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px'\r\n\t};\r\n\tlet inactiveBtn = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'grey',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px'\r\n\t}\r\n\treturn (\r\n        <div className={styles.wrapper}>\r\n\t\t\t<CounterOutput number={props.number} \r\n\t\t\t\tredNumber={props.number === props.maxNumber} \r\n\t\t\t\tchangeMode={props.changeMode}\r\n\t\t\t\terror={props.error}\r\n\t\t\t/>\r\n\t\t\t<div className={styles.btnWrapper}>\r\n\t\t\t\t<Button title=\"inc\"\r\n\t\t\t\t\tonClick={props.incrementNumber}\r\n\t\t\t\t\tdisabled={props.number === props.maxNumber || \r\n\t\t\t\t\t\tprops.changeMode || props.error}\r\n\t\t\t\t\tstyle={props.number === props.maxNumber || \r\n\t\t\t\t\t\tprops.changeMode || \r\n\t\t\t\t\t\tprops.error ? inactiveBtn : mainStyle }\r\n\t\t\t\t/>\r\n\t\t\t\t<Button title=\"reset\"\r\n\t\t\t\t\tonClick={props.resetNumber}\r\n\t\t\t\t\tdisabled={props.number === props.minNumber || \r\n\t\t\t\t\t\tprops.changeMode ||props.error}\r\n\t\t\t\t\tstyle={props.number === props.minNumber || \r\n\t\t\t\t\t\tprops.changeMode || \r\n\t\t\t\t\t\tprops.error ? inactiveBtn : mainStyle }\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    )\r\n}\r\n\r\nexport default Counter;","import React, { ChangeEvent } from 'react';\r\nimport style from '../Counter/Counter.module.css'\r\n\r\ntype SetCounterOutputPropsType = {\r\n\tminNum: number,\r\n\tmaxNum: number,\r\n\tminNumberChange: (num: number) => void,\r\n\tmaxNumberChange: (num: number) => void,\r\n\tsetNewChangeMode: (bool: boolean) => void,\r\n\terror: boolean\r\n}\r\n\r\nfunction SetCounterOutput(props: SetCounterOutputPropsType) {\r\n\r\n\tconst onMinChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tprops.minNumberChange(+event.currentTarget.value);\r\n\t\tprops.setNewChangeMode(true);\r\n\t}\r\n\r\n\tconst onMaxChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tprops.maxNumberChange(+event.currentTarget.value);\r\n\t\tprops.setNewChangeMode(true);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.outputWrapper}>\r\n\t\t\t<div className={style.output}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\tMax Value: <input type=\"number\" value={props.maxNum}\r\n\t\t\t\t\t\tonChange={onMaxChange}\r\n\t\t\t\t\t\tstyle={props.error ? { width: '50px', textAlign: \"center\", fontSize: \"16px\", backgroundColor: 'red' } : { width: '50px', textAlign: \"center\", fontSize: \"16px\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={style.inputTop}>\r\n\t\t\t\t\tMin Value: <input type=\"number\" value={props.minNum}\r\n\t\t\t\t\t\tonChange={onMinChange}\r\n\t\t\t\t\t\tstyle={props.error ? { width: '50px', textAlign: \"center\", fontSize: \"16px\", backgroundColor: 'red'  } : { width: '50px', textAlign: \"center\", fontSize: \"16px\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SetCounterOutput;","import React from 'react';\r\nimport SetCounterOutput from './SetCounterOutput';\r\nimport Button from '../../Common/Button/Button';\r\nimport styles from '../Counter/Counter.module.css'\r\nimport { saveState } from '../../App';\r\n\r\ntype SetCounterPropsType = {\r\n\tsetNewChangeMode: (bool: boolean) => void,\r\n\terror: boolean,\r\n\tsetErrorChange: (bool: boolean) => void,\r\n\tchangeMode: boolean\r\n\tminNumber: number,\r\n\tmaxNumber: number,\r\n\tsetNewMaxNumber: (num: number) => void\r\n\tsetNewMinNumber: (num: number) => void\r\n}\r\n\r\nfunction SetCounter(props: SetCounterPropsType) {\r\n\r\n\tlet mainStyle = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'rgb(67, 185, 218)',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tcursor: 'pointer',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px',\r\n\t};\r\n\tlet inactiveBtn = {\r\n\t\twidth: '90px',\r\n\t\theight: '30px',\r\n\t\tbackgroundColor: 'grey',\r\n\t\tmarginTop: '10px',\r\n\t\toutline: 'none',\r\n\t\tborderRadius: '5px',\r\n\t\tborder: 'none',\r\n\t\tfontSize: '20px'\r\n\t}\r\n\r\n\tfunction minNumberChange(num:number) {\r\n\t\tprops.setNewMinNumber(num);\r\n\t}\r\n\tfunction maxNumberChange(num:number) {\r\n\t\tprops.setNewMaxNumber(num);\r\n\t}\r\n\r\n\tfunction onClickChangeMinMaxValues () {\r\n\t\tprops.setNewChangeMode(false);\r\n\t\tsaveState('min', props.minNumber);\r\n\t\tsaveState('max', props.maxNumber);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={styles.wrapper}>\r\n\t\t\t<SetCounterOutput \r\n\t\t\t\tminNum={props.minNumber}\r\n\t\t\t\tmaxNum={props.maxNumber}\r\n\t\t\t\tminNumberChange={minNumberChange}\r\n\t\t\t\tmaxNumberChange={maxNumberChange}\r\n\t\t\t\tsetNewChangeMode={props.setNewChangeMode}\r\n\t\t\t\terror={props.error}\r\n\t\t\t/>\r\n\t\t\t<div className={styles.btnWrapper}>\r\n\t\t\t\t<Button title=\"set\"\r\n\t\t\t\t\tdisabled={props.minNumber >= props.maxNumber || !props.changeMode ? true : false}\r\n\t\t\t\t\tonClick={onClickChangeMinMaxValues}\r\n\t\t\t\t\tstyle={props.minNumber >= props.maxNumber || !props.changeMode ? inactiveBtn : mainStyle}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SetCounter;","import React, { useState } from 'react';\nimport './App.css';\nimport Counter from './Components/Counter/Counter';\nimport SetCounter from './Components/SetCounter/SetCounter';\n\nexport function saveState<T>(key: string, state: T) {\n\tconst stateAsString = JSON.stringify(state);\n\tlocalStorage.setItem(key, stateAsString)\n}\n\nexport function restoreState<T>(key: string, defaultState: T) {\n\tconst stateAsString = localStorage.getItem(key);\n\tif (stateAsString !== null)  defaultState = JSON.parse(stateAsString); \n\treturn defaultState;\n}\n\nfunction App() {\n\n\tlet [number, setNumber] = useState<number>(0);\n\tlet [minNumber, setMinNumber] = useState<number>(() => {\n\t\tconst savedMinNum = localStorage.getItem('min');\n\t\treturn savedMinNum !== null ? JSON.parse(savedMinNum) : 0\n\t});\n\tlet [maxNumber, setMaxNumber] = useState<number>(() => {\n\t\tconst savedMaxNum = localStorage.getItem('max');\n\t\treturn savedMaxNum !== null ? JSON.parse(savedMaxNum) : 5;\n\t});\n\tlet [changeMode, setChangeMode] = useState<boolean>(false);\n\tlet [error, setError] = useState<boolean>(false);\n\n\tif(minNumber < 0) setMinNumber(0);\n\tif(maxNumber < 0) setMaxNumber(0);\n\tif (minNumber >= maxNumber && error === false) {\n\t\tsetError(true);\n\t\tconsole.log('13');\n\t}\n\tif (minNumber < maxNumber && error === true) setError(false);\n\tif (maxNumber  < 0 && error === false) {\n\t\tsetError(true);\n\t\tconsole.log('skldf')\n\t}\n\tif (minNumber < 0  && error === false) {\n\t\tsetError(true)\n\t\tconsole.log('henlo')\n\t\tconsole.log(error);\n\t}\n\n\tfunction incrementNumber () {\n\t\tsetNumber(++number);\n\t}\n\n\tfunction resetNumber() {\n\t\tsetNumber(minNumber);\n\t}\n\n\tfunction setNewMinNumber(num: number) {\n\t\tsetMinNumber(num);\n\t\tsetNumber(num);\n\t}\n\n\tfunction setNewMaxNumber(num: number){\n\t\tsetMaxNumber(num);\n\t}\n\n\tfunction setNewChangeMode(bool: boolean) {\n\t\tsetChangeMode(bool);\n\t}\n\n\tfunction setErrorChange(bool: boolean) {\n\t\tsetError(bool)\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SetCounter \n\t\t\t\tminNumber={minNumber}\n\t\t\t\tmaxNumber={maxNumber}\n\t\t\t\tsetNewChangeMode={setNewChangeMode}\n\t\t\t\terror={error}\n\t\t\t\tchangeMode={changeMode}\n\t\t\t\tsetErrorChange={setErrorChange}\n\t\t\t\tsetNewMinNumber={setNewMinNumber}\n\t\t\t\tsetNewMaxNumber={setNewMaxNumber}\n\t\t\t/>\n\t\t\t<Counter number={number}\n\t\t\t\tminNumber={minNumber}\n\t\t\t\tmaxNumber={maxNumber}\n\t\t\t\tincrementNumber={incrementNumber}\n\t\t\t\tresetNumber={resetNumber}\n\t\t\t\tchangeMode={changeMode}\n\t\t\t\terror={error}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}